% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import_peaks.R
\name{import_peaks}
\alias{import_peaks}
\title{Import peaks}
\usage{
import_peaks(
  ids,
  builds = "hg19",
  query_granges = NULL,
  query_granges_build = NULL,
  split_chromosomes = FALSE,
  condense_queries = TRUE,
  force_new = FALSE,
  method = "MACSr",
  cutoff = NULL,
  searches = construct_searches(),
  peaks_dir = tempdir(),
  save_path = tempfile(fileext = "_PeakyFinders_grl.rds"),
  nThread = 1,
  verbose = TRUE
)
}
\arguments{
\item{ids}{IDs from one of the supported databases. 
IDs can be at any level: file, sample, or experiment.}

\item{builds}{Genome build that each sample in \code{ids} is aligned to.
This will determine whether whether the \code{query_granges} data need to be 
lifted over to different genome build before querying.
Can be a single character string applied to all \code{ids} (e.g. "hg19"), 
or a vector of the same length as \code{ids} named using the \code{ids} 
(e.g. c("GSM4271282"="hg19", "ENCFF048VDO"="hg38")).}

\item{query_granges}{[Optional]
\link[GenomicRanges]{GRanges} object indicating which genomic
regions to extract from each sample.}

\item{query_granges_build}{[Optional]
Genome build that \code{query_granges} is aligned to.}

\item{split_chromosomes}{Split single-threaded query 
into multi-threaded query across chromosomes. 
This is can be helpful especially when calling peaks from 
large bigWig/bedGraph files.
The number of threads used is set by the \code{nThread} argument.}

\item{condense_queries}{Condense \code{query_granges}
by taking the min/max position per chromosome (default: \code{TRUE)}.
This helps to reduce the total number of queries, 
which can cause memory allocation problems 
due to repeated calls to the underlying C libraries.}

\item{force_new}{By default, saved results of the same \code{save_path} name 
will be imported instead of running queries. However you can override this
by setting \code{force_new} to perform new queries regardless and overwrite
 the old \code{save_path} file.}

\item{method}{Method to call peaks with:
\itemize{
\item{"MACSr" : }{Uses \href{https://github.com/macs3-project/MACS}{MACS3} 
via \link[MACSr]{bdgpeakcall}.}
\item{"SEACR" : }{Uses \href{https://github.com/FredHutch/SEACR}{SEACR} 
via \link[echoconda]{find_packages}.}
}}

\item{cutoff}{\itemize{
\item{when \code{method="MACSr"} : }{
Passed to \code{cutoff} argument.
Cutoff depends on which method you used for score track.
 If the file contains pvalue scores from MACS3, score 5 means pvalue 1e-5.
 If \code{NULL}, a reasonable \code{cutoff} value will be inferred 
 through a \code{cutoff_analysis}. 
}
\item{when \code{method="SEACR"} : }{
Passed to \code{control} argument.
Control (IgG) data bedgraph file to generate an empirical
threshold for peak calling.
Alternatively, a numeric threshold n between 0 and 1 returns the top n
fraction of peaks based on total signal within peaks 
(default: \code{0.05}).
}
}}

\item{searches}{Named list of regex queries.}

\item{peaks_dir}{Directory to save peaks to 
(only used when calling peaks from bedGraph files).}

\item{save_path}{Path to save query results to in \emph{.rds} format.}

\item{nThread}{When \code{nThread>1}, accelerates file importing 
and peak calling using multi-core parallelisation.}

\item{verbose}{Print messages.}
}
\value{
A nested named list of peak files in \link[GenomicRanges]{GRanges} format.
Nesting structure is as follows:
\emph{database -> id ->  GRanges object}
Each \link[GenomicRanges]{GRanges} object contains all the peak
 data that was found for that particular \code{id}, merged into one. 
You can differentiate the various
source file types by looking at the column "peaktype". 
If peaks could not be recovered for a sample,
 that element will be set to \code{NULL}.
}
\description{
Import pre-computed peak files, or
compute new peaks from bedGraph/bigWig files. 
Can import a subset of ranges specified by \code{query_granges},
or across the whole genome by setting \code{query_granges=NULL}.\cr
Currently recognizes IDs from: 
\itemize{
\item{\strong{\href{http://www.ncbi.nlm.nih.gov/geo}{GEO}} : }{}
\item{\strong{\href{https://www.encodeproject.org/}{ENCODE}} : }{
See \code{\link[PeakyFinders]{peaks_metadata_encode}} for example metadata.}
\item{\strong{\href{http://www.roadmapepigenomics.org/}{ROADMAP}} : }{
See \code{\link[PeakyFinders]{peaks_metadata_roadmap}} for example metadata.}
\item{\strong{\href{https://doi.org/doi:10.18129/B9.bioc.AnnotationHub}{
AnnotationHub}} : }{
See \code{\link[PeakyFinders]{peaks_metadata_annotationhub}} 
for example metadata.}
} 
\emph{Notable features}:\cr
\enumerate{
\item{Automatically infers which database each accession ID is from and 
organizes the outputs accordingly.}
\item{Automatically infers which function is needed to 
import which file types.}
\item{Automatically calls peaks from any bedGraph/bigWig files.}
\item{\code{query_granges} can be a different genome build than 
the files being imported, as the \code{query_granges} will 
be lifted over to the correct genome build 
with \link[PeakyFinders]{liftover_grlist}.}
\item{When \code{nThread>1}, accelerates file importing
and peak calling using multi-core parallelisation.}
}
}
\examples{
grl <- PeakyFinders::import_peaks(
    ids = c("GSM945244"),# "ENCSR000AHD"
    searches = PeakyFinders::construct_searches(keys = "narrowpeak"))
}
